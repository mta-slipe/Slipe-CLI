trigger:
- master
- development
pr:
- master
- development

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: 'restore'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*.sln'
    arguments: '--output $(Build.ArtifactStagingDirectory)'

- task: CopyFiles@2
  displayName: 'Copy CLI files'
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: |
      **/Newtonsoft.Json.dll
      **/Slipe.dll
      **/Slipe.exe
      **/Slipe.runtimeconfig.json
    TargetFolder: 'cliPacking/Slipe'


- task: CopyFiles@2
  displayName: 'Copy install.sh'
  inputs:
    SourceFolder: ''
    Contents: |
      **/install.sh
    TargetFolder: 'cliPacking'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'cliPacking/Slipe'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/cli.zip'
    replaceExistingArchive: true

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'cliPacking'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/cli-linux.zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  displayName: 'publish artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'